---
// Particles Background Component
interface Props {
  particleCount?: number;
  colors?: string[];
  speed?: number;
}

const { 
  particleCount = 10, 
  colors = ['rgba(59, 130, 246, 0.6)', 'rgba(147, 51, 234, 0.6)', 'rgba(34, 197, 94, 0.6)', 'rgba(251, 146, 60, 0.6)'],
  speed = 6 
} = Astro.props;
---

<div class="particles-container absolute inset-0 overflow-hidden pointer-events-none">
  <div class="particles-wrapper" data-count={particleCount} data-speed={speed}>
    <!-- Particles will be generated by JavaScript -->
  </div>
</div>

<style is:global>
  .particles-container {
    z-index: 0;
  }
  
  .particle {
    position: absolute;
    width: 4px;
    height: 4px;
    background: rgba(180, 207, 224, 0.85); /* white */
    border-radius: 50%;
    pointer-events: none;
    animation: float 6s ease-in-out infinite;
    box-shadow: 0 0 12px rgba(255, 255, 255, 0.5);
  }
  
  .particle:nth-child(3n) {
    background: rgba(255, 255, 255, 0.9);
    width: 5px;
    height: 5px;
    box-shadow: 0 0 14px rgba(255, 255, 255, 0.55);
  }
  
  .particle:nth-child(5n) {
    background: rgba(255, 255, 255, 0.85);
    width: 3px;
    height: 3px;
    box-shadow: 0 0 12px rgba(255, 255, 255, 0.45);
  }
  
  .particle:nth-child(7n) {
    background: rgba(255, 255, 255, 0.9);
    width: 4px;
    height: 4px;
    box-shadow: 0 0 14px rgba(255, 255, 255, 0.55);
  }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0px) translateX(0px);
      opacity: 0.3;
    }
    25% {
      transform: translateY(-20px) translateX(10px);
      opacity: 0.8;
    }
    50% {
      transform: translateY(-40px) translateX(-5px);
      opacity: 0.6;
    }
    75% {
      transform: translateY(-20px) translateX(-15px);
      opacity: 0.9;
    }
  }
</style>

<script>
  function createParticles() {
    const particlesWrappers = document.querySelectorAll('.particles-wrapper');
    
    particlesWrappers.forEach((wrapper) => {
      const countAttr = wrapper.getAttribute('data-count');
      const speedAttr = wrapper.getAttribute('data-speed');
      const particleCount = parseInt(countAttr || '30', 10);
      const speed = parseInt(speedAttr || '6', 10);
      
      // Clear existing particles
      wrapper.innerHTML = '';
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        
        // Random positioning
        particle.style.left = Math.random() * 100 + '%';
        particle.style.top = Math.random() * 100 + '%';
        
        // Random animation delay
        particle.style.animationDelay = Math.random() * speed + 's';
        
        // Random animation duration
        particle.style.animationDuration = (Math.random() * 3 + speed - 2) + 's';
        
        wrapper.appendChild(particle);
      }
    });
  }
  
  // Initialize particles when DOM is loaded
  document.addEventListener('DOMContentLoaded', createParticles);
  
  // Also initialize when component is mounted (for Astro)
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', createParticles);
  } else {
    createParticles();
  }
  
  // Reinitialize on window resize for better responsiveness
  window.addEventListener('resize', () => {
    setTimeout(createParticles, 100);
  });
</script>
